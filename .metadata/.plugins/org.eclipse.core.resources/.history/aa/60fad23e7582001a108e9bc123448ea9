package pkg;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Random;

import obj.Adjacent;
import obj.Coord;
import util.CSVReader;
import util.Printer;

public class Main {
	private static String[] savedArgs;
    public static String[] getArgs() {
        return savedArgs;
    }

    public static void main(String[] args) {
    	savedArgs=args;
    	
    	// read BDD
    	Map<Integer, Coord<?, ?>> cityCoordMap = CSVReader.getCityCoord();
    	if (Arrays.asList(args).contains("-pn") || Arrays.asList(args).contains("-printNode"))
    		Printer.printCityCoordMap(cityCoordMap);
    	Map<Integer, List<Adjacent<?, ?>>> weightedAdjMap = CSVReader.getWeitedAdj();
    	if (Arrays.asList(args).contains("-pe") || Arrays.asList(args).contains("-printEdge"))
    		Printer.printWeightedAdjMap(weightedAdjMap);
    	
    	// initialize list of cities we have to visit
    	int min = Collections.min(cityCoordMap.keySet());
    	int max = Collections.max(cityCoordMap.keySet());
    	Random rn = new Random();
    	List<Integer> nodeRequierment = new ArrayList<Integer>();
    	for (int i=0; i<5; i++) {
    		nodeRequierment.add(rn.nextInt(max - min + 1) + min)
    	}

    	// launch the path optimizer
    	
    	
//    	PathFinder myPathFinder = new PathFinder(cityCoordMap, weightedAdjMap);
//    	int min = Collections.min(cityCoordMap.keySet());
//    	int max = Collections.max(cityCoordMap.keySet());
//    	
//    	Random rn = new Random();
//    	int start = rn.nextInt(max - min + 1) + min;
//    	int goal = rn.nextInt(max - min + 1) + min;
//    	List<Integer> thePath = myPathFinder.findPathBetweenTwoNode(start, goal);
//    	Printer.printPathData(thePath, myPathFinder);
        
    }

}