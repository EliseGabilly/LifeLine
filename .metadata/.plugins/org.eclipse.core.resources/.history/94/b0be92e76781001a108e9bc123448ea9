package pkg;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import util.Coord;

public class PathFinder {
	
	public List<?> findPath(int start, int goal){
		List<Object> myPath=null;
		
		return myPath;
	} // public List<?> findPath(int start, int goal)
	
	
	/**
	 * @param goal
	 * @param cityCoordMap
	 * @return the map fill with heuristic distance for each node
	 */
	public Map<Integer, Float> makeHeuristic(int goal, Map<Integer, Coord<?, ?>> cityCoordMap){
		Coord<?, ?> goalCoord = cityCoordMap.get(goal);
		Map<Integer, Float> heurysticMap = new HashMap<Integer, Float>();
		int city;
	    Coord<?, ?> coord;
	    float distance;
		for(Map.Entry<Integer, Coord<?, ?>> entry : cityCoordMap.entrySet()) {
			city = entry.getKey();
		    coord =  entry.getValue();
		    distance = getDistance(coord, goalCoord);
		    heurysticMap.put(city, distance);
		}
		return heurysticMap; 		
	} // public Map<Integer, Float> makeHeuristic(int goal, Map<Integer, Coord<?, ?>> cityCoordMap)
	
	/**
	 * @param path
	 * @return if the path is valid, meaning are all edges taken existing
	 */
	public boolean isPathValid(List<?> path) {
		return true;
	} // public boolean isPathValid(List<?> path) 
	
	/**
	 * @param path
	 * @return the some of all edges taken by the path
	 */
	public float getPathCost (List<?> path) {
		@SuppressWarnings("null")
		float totalCost = (Float) null;
		if (isPathValid(path)) {
			
		}
		return totalCost;
	}
	
	/**
	 * @param node1
	 * @param node2
	 * @return the strait distance between two points 
	 */
	public float getDistance (Coord<?, ?> node1, Coord<?, ?> node2) {
		int x1 = node1.getX();
		int y1 = node1.getY();
		int x2 = node1.getX();
		int y2 = node1.getY();
		int xSquare = (int) Math.pow((x2-x1), 2);
		int ySquare = (int) Math.pow((y2-y1), 2);
		float distance = (float) Math.sqrt(xSquare+ySquare);
		return distance;
	} //public float getDistance (int node1, int node2) 
	
	
}
