package obj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Path {

	private List<Integer> path;
	private float cost;
	private float heuristc;

	Path(int start) {
		path = new ArrayList<Integer>(Arrays.asList(start));
		cost = 0;
		heuristc = 0;
	}
	
	Path(Path oldPath){
		Collections.copy(path, oldPath.getPath());
		setHeuristic(); //no need to setCost cause setHeuristic do it
	}

	public float getCost() {
		return cost;
	}
	private void setCost() {
		float c =0;
		//TODO some up all path cost
		this.cost = c;
	}

	public float getHeuristic() {
		return heuristc;
	}
	private void setHeuristic() {
		setCost();
		float h=this.cost;
		//TODO add heuristic of last node
		this.heuristc = h;
	}

	public List<Integer> getPath() {
		return path;
	}

	/**
	 * @param path
	 * @return if the path is valid, meaning are all edges taken existing
	 */
	public boolean isPathValid(List<?> path) {
		return true;
	} // public boolean isPathValid(List<?> path)

}
