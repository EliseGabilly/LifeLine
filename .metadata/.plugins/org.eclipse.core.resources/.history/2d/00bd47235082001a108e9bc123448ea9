package util;

import java.util.List;
import java.util.Map;

import obj.Adjacent;

public class ValidityChecker {

	public static boolean isPathValidSolution(List<Integer> path, int start, int goal,
			Map<Integer, List<Adjacent<?, ?>>> weightedAdjMap) {
		return isSolusion(path, start, goal) && isPathValid(path, weightedAdjMap);
	}

	private static boolean isSolusion(List<Integer> path, int start, int goal) {
		int lastPathNode = path.get(path.size() - 1);
		int firstPathNode = path.get(0);
		return lastPathNode == goal && firstPathNode == start;
	}

	/**
	 * @param path
	 * @return if the path is valid, meaning are all edges taken existing
	 */
	private static boolean isPathValid(List<Integer> path, Map<Integer, List<Adjacent<?, ?>>> weightedAdjMap) {
		int s;
		int e;
		boolean allEdgeValid = true;
		boolean oneEdgeValide;
		List<Adjacent<?, ?>> neighborsList;
		for (int i=0; i<path.size()-2; i++) {
			s = path.get(i);
			e= path.get(i+1);
			// for each couple of node/edges
			// we check if the edge is in the adjency map
			neighborsList = weightedAdjMap.get(s);
			oneEdgeValide=false;
			for(Adjacent<?,?>neighbor:neighborsList) {
				if(neighbor.getCity()==e) {
					oneEdgeValide=true;
					continue;
				}
			}
			allEdgeValid=allEdgeValid&&oneEdgeValide;
		}
		return true;
	} // public boolean isPathValid(List<?> path)

}
